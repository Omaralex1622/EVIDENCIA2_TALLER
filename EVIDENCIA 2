import datetime
import re
import os
import pandas as pd

Nota_registrada = {}


def validar_fecha(fecha):
    try:
        fecha_ingresada = datetime.datetime.strptime(fecha, "%d-%m-%y")
        fecha_actual = datetime.datetime.now()
        return fecha_ingresada <= fecha_actual
    except ValueError:
        return False


def validar_rfc(rfc):
    
    rfc_pattern = re.compile(r'^[A-Z]{4}\d{6}[A-Z0-9]{3}$')
    return rfc_pattern.match(rfc) is not None


def validar_correo(correo):
   
    correo_pattern = re.compile(r'^[\w\.-]+@[\w\.-]+$')
    return correo_pattern.match(correo) is not None


def agregar_servicio():
    servicio = {}
    
    while True:
        nombre_servicio = input("Ingrese el nombre del servicio realizado (o 'cancelar' para salir): ").strip()
        if nombre_servicio.lower() == 'cancelar':
            return None
        
        if nombre_servicio:
            break
        else:
            print("Por favor, ingrese un nombre de servicio válido.")

    while True:
        try:
            costo_servicio = float(input("Ingrese el costo del servicio realizado (mayor que 0): "))
            if costo_servicio <= 0:
                print("El costo debe ser mayor que cero.")
            else:
                costo_servicio_str = "{:.2f}".format(costo_servicio)  
                servicio['Nombre'] = nombre_servicio
                servicio['Costo'] = costo_servicio_str
                break
        except ValueError:
            print("Ingrese un costo válido (número mayor que cero).")

    return servicio


def crear_nota():
    while True:
        cliente = input("Ingrese el nombre del cliente (o 'salir' para terminar): ").strip()
        if cliente.lower() == 'salir':
            break

        while True:
            fecha_ingresada = input("Ingrese la fecha (DD-MM-YYYY): ").strip()
            fecha_actual = datetime.datetime.now()
            fecha_formato_correcto = re.match(r'^\d{2}-\d{2}-\d{4}$', fecha_ingresada)

            if not fecha_formato_correcto:
                print("El formato de fecha ingresado es incorrecto. Utilice DD-MM-YYYY.")
            else:
                fecha_ingresada = datetime.datetime.strptime(fecha_ingresada, "%d-%m-%Y")
                if fecha_ingresada > fecha_actual:
                    print("La fecha no puede ser posterior a la fecha actual.")
                else:
                    break

        while True:
            rfc = input("Ingrese el RFC (Formato válido, ej. ABCD123456XYZ): ").strip()
            if validar_rfc(rfc):
                break
            else:
                print("RFC inválido. Por favor, ingrese un RFC válido.")

        while True:
            correo = input("Ingrese el correo electrónico (Formato válido, ej. ejemplo@dominio.com): ").strip()
            if validar_correo(correo):
                break
            else:
                print("Correo electrónico inválido. Por favor, ingrese un correo válido.")

        nota = []
        while True:
            servicio = agregar_servicio()
            if servicio is None:
                break
            nota.append(servicio)

        if nota:  
            total = sum(float(servicio['Costo']) for servicio in nota)
                           
            print("\nResumen de la nota:")
            print(f"Cliente: {cliente}")
            print(f"Fecha: {fecha_ingresada}")
            print(f"RFC: {rfc}")
            print(f"Correo Electrónico: {correo}")
            print("Servicios realizados:")
            for servicio in nota:
                print(f"- {servicio['Nombre']}: ${servicio['Costo']}")
            print(f"Monto Total: ${total:.2f}\n")
            
            
            folio = datetime.datetime.now().strftime("%d%m%y%H%M%S")
            
            Nota_registrada[folio] = {
                'Fecha': fecha_ingresada,
                'Cliente': cliente,
                'RFC': rfc,
                'Correo Electrónico': correo,
                'Servicios': nota,
                'Monto Total': total,
                'Cancelada': False
            }
        else:
            print("La nota debe contener al menos un servicio. Por favor, vuelva a ingresar la nota.")


def consulta_por_periodo():
    fecha_inicial = input("Ingrese la fecha inicial (DD-MM-YYYY) o deje en blanco para usar la fecha actual: ").strip()
    if not fecha_inicial:
        fecha_inicial = datetime.datetime.now().strftime("%d-%m-%y")

    while True:
        fecha_final = input("Ingrese la fecha final (DD-MM-YYYY): ").strip()
        if not validar_fecha(fecha_final):
            print("La fecha final debe ser igual o posterior a la fecha inicial.")
        else:
            break
 notas_en_periodo = []
    total_montos = 0
    cantidad_notas = 0

    for folio, detalles in Nota_registrada.items():
        fecha_nota = detalles['Fecha']
        if fecha_inicial <= fecha_nota <= fecha_final:
            notas_en_periodo.append((folio, fecha_nota))
            total_montos += detalles['Monto Total']
            cantidad_notas += 1

    if notas_en_periodo:
        print("\nNotas en el período seleccionado:")
        print("Folio\tFecha")
        for folio, fecha_nota in notas_en_periodo:
            print(f"{folio}\t{fecha_nota}")

        monto_promedio = total_montos / cantidad_notas
        print(f"\nMonto Promedio de las Notas del Periodo: ${monto_promedio:.2f}")
    else:
        print("No hay notas emitidas para el período seleccionado.")


def consulta_por_folio():
    folio_consulta = input("Ingresa el folio de la nota a consultar: ").strip()

    nota = Nota_registrada.get(folio_consulta)

    if nota:
        if not nota['Cancelada']:
            print("\nDetalles de la nota:")
            print(f"Folio: {folio_consulta}")
            print(f"Fecha: {nota['Fecha']}")
            print(f"Cliente: {nota['Cliente']}")
            print(f"RFC: {nota['RFC']}")
            print(f"Correo Electrónico: {nota['Correo Electrónico']}")
            print("Servicios realizados:")
            for servicio in nota['Servicios']:
                print(f"- {servicio['Nombre']}: ${servicio['Costo']}")
            print(f"Monto Total: ${nota['Monto Total']:.2f}")
        else:
            print(f"La nota {folio_consulta} corresponde a una nota cancelada.")
    else:
        print(f"La nota con folio {folio_consulta} no existe en el sistema.")


def consulta_por_cliente():
    rfc_to_folio = {}  
    consecutivo = 1  

    for folio, detalles in Nota_registrada.items():
        rfc = detalles['RFC']
        if rfc not in rfc_to_folio:
            rfc_to_folio[rfc] = consecutivo
            consecutivo += 1

    while True:
        print("\nListado de RFCs:")
        for rfc, folio in rfc_to_folio.items():
            print(f"{folio}. {rfc}")

        seleccion = input("Seleccione el folio correspondiente al RFC a consultar o 'salir' para volver al menú: ").strip()

        if seleccion.lower() == 'salir':
            break

        try:
            seleccion = int(seleccion)
            rfc = None

            for rfc_actual, folio in rfc_to_folio.items():
                if folio == seleccion:
                    rfc = rfc_actual
                    break

            if rfc:
                print("\nNotas para el RFC seleccionado:")
                notas_cliente = [nota for nota in Nota_registrada.values() if nota['RFC'] == rfc]

                total_montos = 0
                cantidad_notas = len(notas_cliente)

                for nota in notas_cliente:
                    fecha = nota['Fecha']  

                    print("\nDetalles de la nota:")
                    print(f"Folio: {fecha}_{rfc}")
                    print(f"Fecha: {fecha}")
                    

                    total_montos += nota['Monto Total']

                monto_promedio = total_montos / cantidad_notas
                print(f"Monto Promedio de las Notas del Cliente: ${monto_promedio:.2f}")
                
            else:
                print("Folio no válido. Seleccione un folio de la lista.")
        except ValueError:
            print("Entrada no válida. Seleccione un folio de la lista o 'salir' para volver al menú.")



def cancelar_nota():
    folio_cancelar = input("Ingrese el folio de la nota a cancelar: ").strip()

    nota = Nota_registrada.get(folio_cancelar)

    if nota:
        if not nota['Cancelada']:
            print("\nDetalles de la nota:")
            print(f"Folio: {folio_cancelar}")
            print(f"Fecha: {nota['Fecha']}")
            print(f"Cliente: {nota['Cliente']}")
            print(f"RFC: {nota['RFC']}")
            print(f"Correo Electrónico: {nota['Correo Electrónico']}")
            print("Servicios realizados:")
            for servicio in nota['Servicios']:
                print(f"- {servicio['Nombre']}: ${servicio['Costo']}")
            print(f"Monto Total: ${nota['Monto Total']:.2f}\n")

            confirmacion = input(f"¿Deseas cancelar la nota {folio_cancelar}? (s/n): ").strip().lower()
            if confirmacion == 's':
                nota['Cancelada'] = True
                print(f"La nota {folio_cancelar} ha sido cancelada.")
            else:
                print(f"La nota {folio_cancelar} no fue cancelada.")
        else:
            print(f"La nota con folio {folio_cancelar} corresponde a una nota cancelada.")
    else:
        print(f"La nota con folio {folio_cancelar} no existe en el sistema o corresponde a una nota cancelada.")


def recuperar_nota():
    notas_canceladas = [nota for nota in Nota_registrada.values() if nota['Cancelada']]

    if not notas_canceladas:
        print("No hay notas canceladas en el sistema.")
    else:
        print("\nNotas Canceladas:")
        print("Folio\tFecha\tCliente\tRFC")
        for nota in notas_canceladas:
            print(f"{nota['Fecha']}\t{nota['Cliente']}\t{nota['RFC']}")

        folio_recuperar = input("Ingrese el folio de la nota que desea recuperar o '0' para salir: ").strip()
folio_recuperar = input("Ingrese el folio de la nota que desea recuperar o '0' para salir: ").strip()

        if folio_recuperar == '0':
            return

        nota = next((nota for nota in notas_canceladas if nota['Folio'] == folio_recuperar), None)

        if nota:
            print("\nDetalles de la nota cancelada:")
            print(f"Folio: {nota['Fecha']}_{nota['RFC']}")
            print(f"Fecha: {nota['Fecha']}")
            print(f"Cliente: {nota['Cliente']}")
            print(f"RFC: {nota['RFC']}")
            print(f"Correo Electrónico: {nota['Correo Electrónico']}")
            print("Servicios realizados:")
            for servicio in nota['Servicios']:
                print(f"- {servicio['Nombre']}: ${servicio['Costo']}")
            print(f"Monto Total: ${nota['Monto Total']:.2f}\n")

            confirmacion = input(f"¿Deseas recuperar la nota {folio_recuperar}? (s/n): ").strip().lower()
            if confirmacion == 's':
                nota['Cancelada'] = False
                print(f"La nota {folio_recuperar} ha sido recuperada.")
            else:
                print(f"La nota {folio_recuperar} no fue recuperada.")
        else:
            print(f"La nota con folio {folio_recuperar} no existe en el sistema o no está cancelada.")

# Función para guardar el estado de la aplicación en un archivo CSV
def guardar_estado_csv():
    try:
        with open(archivo_estado, 'w') as archivo:
            archivo.write("Folio,Fecha,Cliente,RFC,Correo Electrónico,Servicios,Monto Total,Cancelada\n")

            for folio, detalles in Nota_registrada.items():
                fecha = detalles['Fecha']
                cliente = detalles['Cliente']
                rfc = detalles['RFC']
                correo = detalles['Correo Electrónico']
                servicios = "|".join([f"{servicio['Nombre']}:{servicio['Costo']}" for servicio in detalles['Servicios']])
                monto_total = detalles['Monto Total']
                cancelada = detalles['Cancelada']

                linea = f"{folio},{fecha},{cliente},{rfc},{correo},{servicios},{monto_total},{cancelada}\n"
                archivo.write(linea)

        print("Estado de la aplicación guardado exitosamente en archivo CSV.")
    except Exception as e:
        print(f"Error al guardar el estado de la aplicación: {str(e)}")

# Función para cargar el estado de la aplicación desde un archivo CSV
def cargar_estado_csv():
    try:
        if os.path.exists(archivo_estado):
            with open(archivo_estado, 'r') as archivo:
                lineas = archivo.readlines()

                for linea in lineas[1:]:  # Saltar la primera línea de encabezados
                    campos = linea.strip().split(',')
                    folio, fecha, cliente, rfc, correo, servicios_str, monto_total, cancelada_str = campos

                    servicios = []
                    servicios_campos = servicios_str.split('|')
                    for servicio_campo in servicios_campos:
                        nombre, costo = servicio_campo.split(':')
                        servicios.append({'Nombre': nombre, 'Costo': costo})

                    monto_total = float(monto_total)
                    cancelada = (cancelada_str.lower() == 'true')

                    Nota_registrada[folio] = {
                        'Fecha': fecha,
                        'Cliente': cliente,
                        'RFC': rfc,
                        'Correo Electrónico': correo,
                        'Servicios': servicios,
                        'Monto Total': monto_total,
                        'Cancelada': cancelada
                    }

            print("Estado de la aplicación cargado exitosamente desde archivo CSV.")
        else:
            print("No se encontró un archivo de estado anterior. Iniciando con un estado vacío.")
    except Exception as e:
        print(f"Error al cargar el estado de la aplicación desde archivo CSV: {str(e)}")

# Función principal
def main():
    cargar_estado_csv()  # Cargar estado de la aplicación desde archivo CSV (si existe)

    while True:
        print("\nMenú Principal:")
        print("1. Crear una nota")
        print("2. Consultas y Reportes")
        print("3. Recuperar una nota cancelada")
        print("4. Cancelar una nota")
        print("5. Mostrar notas canceladas")
        print("6. Salir del sistema")
        opcion = input("Seleccione una opción (1/2/3/4/5/6): ").strip()

        if opcion == '1':
            # Crear una nota
            crear_nota()

        elif opcion == '2':
            # Consultas y Reportes
            while True:
                print("\nConsultas y Reportes:")
                print("1. Consulta por periodo")
                print("2. Consulta por folio")
                print("3. Consulta por cliente")
                print("4. Volver al Menú Principal")
                consulta = input("Seleccione una opción (1/2/3/4): ").strip()

                if consulta == '1':
                    # Consulta por periodo
                    consulta_por_periodo()

                elif consulta == '2':
                    # Consulta por folio
                    consulta_por_folio()

                elif consulta == '3':
                    # Consulta por cliente
                    consulta_por_cliente()

                elif consulta == '4':
                    break

                else:
                    print("Opción inválida")

        elif opcion == '3':
            # Recuperar una nota cancelada
            recuperar_nota()

        elif opcion == '4':
            # Cancelar una nota
            cancelar_nota()

        elif opcion == '5':
            # Mostrar notas canceladas
            notas_canceladas = [folio for folio, detalles in Nota_registrada.items() if detalles['Cancelada']]

            if not notas_canceladas:
                print("No hay notas canceladas en el sistema.")
            else:
                print("\nNotas Canceladas:")
                for folio_cancelada in notas_canceladas:
                    print(f"Folio: {folio_cancelada}")

        elif opcion == '6':
            confirmacion_salir = input("¿Está seguro que desea salir del sistema? (s/n): ").strip().lower()
            if confirmacion_salir == 's':
                guardar_estado_csv()  # Guardar estado de la aplicación en archivo CSV
                print("Saliendo del sistema")
                break
        else:
            print("Opción inválida, inténtalo de nuevo")

if __name__ == "__main__":
    main()



